using System.ComponentModel;
using System.Diagnostics;
using System.Text.Json;
using ModelContextProtocol.Server;
using Npgsql;

namespace McpAgentWorkshop.McpServer.Tools;

[McpServerPromptType]
public class SalesTools
{
    private static readonly JsonSerializerOptions jsonOptions = new() { WriteIndented = true };

    [McpServerTool, Description("Run a PostgreSQL query against the sales database by first using get_multiple_table_schemas() to retrieve schemas for any tables you haven't yet obtained, then, if your query depends on the current date or time, call get_current_utc_date() to get the current UTC date/time. Always compose your SQL using the exact table and column names from these schemas, and pass the query to this tool for execution. For more readable results, join related tables to show descriptive fields such as customer names, product names, store names, and category names; distinguish online and physical stores using the is_online flag (for example, CASE WHEN s.is_online THEN 'Online' ELSE 'Physical' END AS store_type); and, unless the user specifically asks for raw data, prefer aggregated results using functions like SUM, AVG, COUNT, and GROUP BY. ALWAYS Limit the number of rows returned to 20 or fewer to avoid overwhelming the user with too much data and explain that results are limited for performance and readability.")]
    public async Task<string> ExecuteSalesQueryAsync(
        NpgsqlConnection connection,
        ILogger<SalesTools> logger,
        IHttpContextAccessor httpContextAccessor,
        [Description("A well-formed PostgreSQL query.")] string query
    )
    {
        var activity = Diagnostics.ActivitySource.StartActivity(
            name: nameof(ExecuteSalesQueryAsync),
            kind: ActivityKind.Server,
            links: Diagnostics.ActivityLinkFromCurrent());

        if (string.IsNullOrEmpty(query))
        {
            logger.LogError("Query cannot be null or empty.");
            throw new ArgumentException("Query cannot be null or empty.", nameof(query));
        }

        var rlsUserId = httpContextAccessor.GetRequestUserId();
        logger.LogInformation("RLS User ID: {RlsUserId}", rlsUserId);

        try
        {
            if (activity is not null)
            {
                activity.SetTag("app.manager_id", rlsUserId);
                activity.SetTag("db.query", query);
                activity.DisplayName = "PostgreSQL:ExecuteSalesQuery";
            }

            await connection.OpenAsync();

            await using var cmd = new NpgsqlCommand("SELECT set_config('app.current_rls_user_id', @rlsUserId, false)", connection);
            cmd.Parameters.AddWithValue("rlsUserId", rlsUserId ?? string.Empty);
            await cmd.ExecuteNonQueryAsync();

            await using var queryCmd = new NpgsqlCommand(query, connection);
            await using var reader = await queryCmd.ExecuteReaderAsync();

            var results = new List<Dictionary<string, object?>>();
            var columns = new List<string>();

            if (reader.HasRows)
            {
                for (int i = 0; i < reader.FieldCount; i++)
                    columns.Add(reader.GetName(i));

                int rowCount = 0;
                while (await reader.ReadAsync())
                {
                    var row = new Dictionary<string, object?>();
                    for (int i = 0; i < reader.FieldCount; i++)
                    {
                        row[columns[i]] = reader.IsDBNull(i) ? null : reader.GetValue(i);
                    }
                    results.Add(row);
                    rowCount++;
                }

                activity?.SetTag("db.results.count", rowCount);

                return JsonSerializer.Serialize(new
                {
                    results,
                    row_count = rowCount,
                    columns
                }, jsonOptions);
            }
            else
            {
                activity?.SetTag("db.results.count", 0);

                return JsonSerializer.Serialize(new
                {
                    results = new List<object>(),
                    row_count = 0,
                    columns = new List<string>(),
                    message = "The query returned no results. Try a different question."
                }, jsonOptions);
            }
        }
        catch (NpgsqlException ex)
        {
            logger.LogError(ex, "An error occurred while executing the sales query, likely due to a malformed SQL query.");
            return "An error occurred while executing the sales query. It's likely that the query is malformed, verify that the SQL query has been generated by calling the get_multiple_table_schemas() tool first, and that the query is well-formed and uses the correct table and column names.";
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "An unexpected error occurred while executing the sales query.");
            return "An unexpected error occurred while executing the sales query.";
        }
    }
}